*readline.txt*	Readline-style mappings for command mode

Author:		Elias Astrom <github.com/ryvnf>
Licence:	The VIM LICENSE (see |license|).  This Plugin is distributed
		under the same conditions as Vim itself.

==============================================================================
INTRO						*readline*

This plugin will add a subset of readline's default bindings to Vim's command
mode.  It implements the most commonly used functionality from readline, which
includes moving and deleting by words and some other stuff.

The word movement and deletion commands implemented by this plugin will skip
word delimiters, this is different from what Vim usually does.  The change is
made to be more like readline, which also has this behavior.

Some mappings will override default Vim functionality (like |c_CTRL-F|).  If
the default Vim functionality is useful, it should still be accessible through
other mappings (like |c_CTRL-X_CTRL-E|).

==============================================================================
MAPPINGS					*readline-mappings*

						*readline-c_CTRL-X_CTRL-G*
CTRL-X CTRL-G	or				*readline-c_<Esc>CTRL-G*
<Esc>CTRL-G	or				*readline-c_CTRL-G*
CTRL-G			No operation.  CTRL-G is used to abort the current
			command, no matter what keystrokes where typed before
			it.

						*readline-c_CTRL-B*
CTRL-B			Move cursor left.

						*readline-c_CTRL-F*
CTRL-F			Move cursor right.  Use |CTRL-X_CTRL-E| to access the
			overridden Vim mapping.

						*readline-c_<Esc>b*
<Esc>b		or				*readline-c_<Esc>B*
<Esc>B			Move cursor back to start of word.  Word is delimited by
			non-alphanumeric characters.

						*readline-c_<Esc>f*
<Esc>f		or				*readline-c_<Esc>F*
<Esc>F			Move cursor forward to end of word.  Word is delimited
			by non-alphanumeric characters.

						*readline-c_CTRL-A*
CTRL-A			Move cursor to beginning of line.  Use |<M-star>| or
			|<Esc>star| to access the overridden default Vim
			mapping.

						*readline-c_CTRL-E*
CTRL-E			Move cursor to end of line.

						*readline-c_CTRL-H*
CTRL-H		or				*readline-c_<BS>*
<BS>			Delete character before cursor.

						*readline-c_CTRL-D*
CTRL-D			Delete character under cursor.  Use <Esc>? to access
			the overridden default Vim mapping.

						*readline-c_<Esc>CTRL-H*
<Esc>CTRL-H	or				*readline-c_<Esc><BS>*
<Esc><BS>		Delete back to start of previous word.  Word is
			delimited by non-alphanumeric characters.

						*readline-c_CTRL-W*
CTRL-W			Delete to beginning of previous word.  Word is
			delimited by spaces.

						*readline-c_<Esc>d*
<Esc>d		or				*readline-c_<Esc>D*
<Esc>D			Delete forward to end of word.  Word is delimited by
			non-alphanumeric characters.

						*readline-c_CTRL-X_CTRL-H*
CTRL-X CTRL-H					*readline-c_CTRL-X_<BS>*
CTRL-X <BS>					*readline-c_CTRL-U*
CTRL-U			Delete to beginning of line.

						*readline-c_CTRL-K*
CTRL-K			Delete to end of line.  This overrides the default Vim
			mapping to insert digraph.  You can set 'digraph' to
			be able to insert digraphs using <BS> instead. Or you
			can put `cnoremap <c-k> <c-k>` in your vimrc to
			restore the default binding.

						*readline-c_CTRL-Y*
CTRL-Y			Yank (paste) previously deleted text.  Only text
			deleted through commands which operate on words or
			lines can be recalled.

						*readline-c_CTRL-T*
CTRL-T			Transpose characters before the cursor.

						*readline-c_<Esc>t*
<Esc>t		or				*readline-c_<Esc>T*
<Esc>T			Transpose words before the cursor.

						*readline-c_<Esc>u*
<Esc>u		or				*readline-c_<Esc>U*
<Esc>U			Make word in front of cursor UPPERCASE.

						*readline-c_<Esc>l*
<Esc>l		or				*readline-c_<Esc>L*
<Esc>L			Make word in front of cursor lowercase.

						*readline-c_<Esc>c*
<Esc>c		or				*readline-c_<Esc>C*
<Esc>C			Make word in front of cursor Capitalized.

						*readline-c_<Esc>#*
<Esc>#			Comment out the current command line and execute it.
			This will put the line in history for later retrival,
			without running it.

						*readline-c_<Esc>=*
<Esc>=		or				*readline-c_<Esc>?*
<Esc>?			Display all names that match pattern in front of
			cursor.  Replacement for the default |c_CTRL-D|
			mapping which gets overridden.

						*readline-c_<Esc>star*
<Esc>*			Insert all names that match pattern in front of
			cursor.  Replacement for the default |c_CTRL-A|
			mapping which gets overridden.

						*readline-c_CTRL-X_CTRL-E*
CTRL-X CTRL-E		Open command-line window.  See |cmdline| for more
			information.  Replacement for the default |c_CTRL-F|
			mapping which gets overridden.

==============================================================================
META KEY					*readline-meta*

This plugin uses <Esc> for META keys.  Previously the commands where also
accessed by using the ALT or META modifier, but that caused problems where
some accented characters like Ã¤ would be interpreted as meta-key commands and
trigger mappings.

If that is not a problem for you, then you can use the following mappings to
make the commands accessible by holding the META or ALT modifier. >

  :cmap <M-C-g> <Esc><C-g>
  :cmap <M-b> <Esc>b
  :cmap <M-B> <Esc>B
  :cmap <M-f> <Esc>f
  :cmap <M-F> <Esc>F
  :cmap <M-bs> <Esc><BS>
  :cmap <M-d> <Esc>d
  :cmap <M-D> <Esc>D
  :cmap <M-t> <Esc>t
  :cmap <M-T> <Esc>T
  :cmap <M-u> <Esc>u
  :cmap <M-U> <Esc>U
  :cmap <M-l> <Esc>l
  :cmap <M-L> <Esc>L
  :cmap <M-c> <Esc>c
  :cmap <M-C> <Esc>C
  :cmap <M-?> <Esc>?
  :cmap <M-=> <Esc>=
  :cmap <M-*> <Esc>*
<

Also note that most terminals can be configured to send <Esc><Key> when <Key>
is pressed the ALT modifier is held.

==============================================================================
INSERT MODE					*readline-insert*

This plugin does not add readline-style commands to insert mode.  This is
because it is not very useful, as experienced Vim users will use normal mode
for these commands.  Implementing these mappings in insert mode would also
override a lot of useful default Vim bindings.  Some mappings also use <Esc>
which might cause problems with mode switching if implemented in insert-mode.

==============================================================================
BUGS						*readline-bugs*

If happen to find a bug, please create issue at
<github.com/ryvnf/readline.vim>.
